<Project>
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>
  
  <ItemGroup>
    <LibtorchConfig Include="windows" LibName="libtorch-win-shared-with-deps" FileExtension=".zip" 
      FilesFromArchive= "libtorch\lib\caffe2.dll;
                        libtorch\lib\caffe2_module_test_dynamic.dll;
                        libtorch\lib\caffe2_detectron_ops.dll;
                        libtorch\lib\onnxifi.dll;
                        libtorch\lib\libiomp5md.dll;
                        libtorch\lib\libiompstubs5md.dll;
                        libtorch\lib\torch.dll;
                        libtorch\lib\onnxifi_dummy.dll;
                        libtorch\lib\c10.dll;" 
      Runtime="win-x64"/>
    <LibtorchConfig Include="linux" LibName="libtorch-shared-with-deps" FileExtension=".zip" 
      FilesFromArchive= "libtorch\lib\libc10.so;
                        libtorch\lib\libcaffe2.so;
                        libtorch\lib\libcaffe2_detectron_ops.so;
                        libtorch\lib\libcaffe2_module_test_dynamic.so;
                        libtorch\lib\libonnxifi.so;
                        libtorch\lib\libonnxifi_dummy.so;
                        libtorch\lib\libtorch.so;
                        libtorch\lib\libtorch.so.1;
                        libtorch\lib\libgomp-8bba0e50.so.1;"
      Runtime="linux-x64" />
    <LibtorchConfig Include="darwin" LibName="libtorch-macos" FileExtension=".zip" 
      FilesFromArchive= "libtorch\lib\libc10.dylib;
                        libtorch\lib\libcaffe2.dylib;
                        libtorch\lib\libcaffe2_detectron_ops.dylib;
                        libtorch\lib\libcaffe2_observers.dylib;
                        libtorch\lib\libcaffe2_module_test_dynamic.dylib;
                        libtorch\lib\libonnxifi_dummy.dylib;
                        libtorch\lib\libonnxifi.dylib;
                        libtorch\lib\libshm.dylib;
                        libtorch\lib\libtorch.1.dylib;
                        libtorch\lib\libtorch.dylib;
                        libtorch\lib\libtorch_python.dylib;" 
      Runtime="osx-x64" />

    <AdditionalDownloadFile Include="https://raw.githubusercontent.com/pytorch/pytorch/master/LICENSE" DownloadFile="$(IntermediateOutputPath)LICENSE-LIBTORCH" />
  </ItemGroup>


  <ItemGroup>
    <MklDnnConfig Include="darwin" FileExtension=".tgz" 
      FilesFromArchive= "mklml_mac_$(MklDnnVersion)\lib\libmklml.dylib;
                        mklml_mac_$(MklDnnVersion)\lib\libiomp5.dylib;" 
      Runtime="osx-x64" />

    <AdditionalDownloadFile Include="https://raw.githubusercontent.com/intel/mkl-dnn/master/LICENSE" DownloadFile="$(IntermediateOutputPath)LICENSE-MKL-DNN" />
  </ItemGroup>


  <Target Name="PrepareArchives">
    <ItemGroup>
      <!-- although we could extract all archives on all machines, mac requires a fixup which can only be run on mac 
           so we split these per-rid and join during the official build packaging.  -->
      <LibtorchArchive Condition="'$(PackageRid)' == '%(Runtime)'"
                         Include="@(LibtorchConfig->'https://download.pytorch.org/libtorch/cpu/%(LibName)-$(LibtorchVersion)%(FileExtension)')" />
      <!-- set up metdata used by all targets -->
      <LibtorchArchive DownloadFile="$(IntermediateOutputPath)%(FileName)%(Extension)"
                         DownloadShaFile="$(IntermediateOutputPath)%(FileName)%(Extension).sha"
                         ExtractDirectory="$(IntermediateOutputPath)%(FileName)"
                         ExtractSemaphore="$(IntermediateOutputPath)%(FileName)\.extracted"
                         LocalShaFile="$(MSBuildProjectDirectory)\%(FileName)%(Extension).sha"/>
    </ItemGroup>

    <ItemGroup Condition="'$(PackageRid)' == 'osx-x64'">
      <MklDnnArchive Include="@(MklDnnConfig->'https://github.com/intel/mkl-dnn/releases/download/v0.19/mklml_mac_$(MklDnnVersion)%(FileExtension)')" />
      <!-- set up metdata used by all targets -->
      <MklDnnArchive DownloadFile="$(IntermediateOutputPath)%(FileName)%(Extension)"
                         DownloadShaFile="$(IntermediateOutputPath)%(FileName)%(Extension).sha"
                         ExtractDirectory="$(IntermediateOutputPath)%(FileName)"
                         ExtractSemaphore="$(IntermediateOutputPath)%(FileName)\.extracted"
                         LocalShaFile="$(MSBuildProjectDirectory)\%(FileName)%(Extension).sha"/>
    </ItemGroup>
  </Target>

  <UsingTask TaskName="DownloadFilesFromUrl" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <Target Name="DownloadArchives" 
          DependsOnTargets="PrepareArchives"
          Inputs="$(MSBuildProjectFile)"
          Outputs="@(LibtorchArchive->'%(DownloadFile)');@(AdditionalDownloadFile->'%(DownloadFile)')">
    <MakeDir Directories="$(IntermediateOutputPath)" />
    <ItemGroup>
      <!-- DownloadFilesFromUrl requires Url metadata is set and ignores the identity of the item -->
      <_downloadFiles Include="@(LibtorchArchive);@(AdditionalDownloadFile)" Url="%(Identity)" DestinationFile="%(DownloadFile)" />
    </ItemGroup>
    <Message Importance="High" Text="Downloading '%(_downloadFiles.Url)' to '%(_downloadFiles.DestinationFile)'." />
    <DownloadFilesFromUrl Items="@(_downloadFiles)" />
  </Target>

  <!-- Download both libtorch and mkl-dnn -->
  <Target Name="DownloadArchives" 
          DependsOnTargets="PrepareArchives"
          Inputs="$(MSBuildProjectFile)"
          Outputs="@(LibtorchArchive->'%(DownloadFile)');@(AdditionalDownloadFile->'%(DownloadFile)';@(MklDnnArchive->'%(DownloadFile))">
    <MakeDir Directories="$(IntermediateOutputPath)" />
    <ItemGroup>
      <!-- DownloadFilesFromUrl requires Url metadata is set and ignores the identity of the item -->
      <_downloadFiles Include="@(LibtorchArchive);@(AdditionalDownloadFile);@(MklDnnArchive)" Url="%(Identity)" DestinationFile="%(DownloadFile)" />
    </ItemGroup>
    <Message Importance="High" Text="Downloading '%(_downloadFiles.Url)' to '%(_downloadFiles.DestinationFile)'." />
    <DownloadFilesFromUrl Items="@(_downloadFiles)" />
  </Target>
  
  <UsingTask TaskName="GenerateChecksums" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <UsingTask TaskName="ZipFileExtractToDirectory" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <!-- Validate and extract Archive for Libtorch -->
  <Target Name="ValidateAndExtractArchivesLibtorch" 
          DependsOnTargets="DownloadArchives"
          Inputs="@(LibtorchArchive->'%(DownloadFile)')"
          Outputs="@(LibtorchArchive->'%(ExtractSemaphore)')">
    <!-- GenerateChecksums writes a sha checksum to the file specified by DestinationPath metadata -->
    <ItemGroup>
      <_filesToCheckSum Include="@(LibtorchArchive->'%(DownloadFile)')" DestinationPath="%(DownloadShaFile)" />
    </ItemGroup>
    <GenerateChecksums Items="@(_filesToCheckSum)" />

    <!-- If specified we'll update the checked in SHAs with the downloaded ones. -->
    <Copy Condition="'$(UpdateSHA)' == 'true'"
          SourceFiles="@(LibtorchArchive->'%(DownloadShaFile)')"
          DestinationFiles="@(LibtorchArchive->'%(LocalShaFile)')" />

    <Error Condition="!Exists('%(LibtorchArchive.LocalShaFile)')" Text="SHA file '%(LibtorchArchive.LocalShaFile)' does not exist.  Build with /p:UpdateSHA=true to save it." />

    <!-- Read in the SHAs as metadata on the archive items -->
    <ItemGroup>
      <LibtorchArchive>
        <LocalSha>$([System.IO.File]::ReadAllText('%(LocalShaFile)'))</LocalSha>
        <DownloadSha>$([System.IO.File]::ReadAllText('%(DownloadShaFile)'))</DownloadSha>
      </LibtorchArchive>
    </ItemGroup>
    <!-- Validate that the downloaded SHAs match the expected checked in SHAs -->
    <Error Condition="'%(LibtorchArchive.LocalSha)' != '%(LibtorchArchive.DownloadSha)'" Text="Downloaded file '%(LibtorchArchive.DownloadFile)' has unexpected SHA.%0A  expected: %(_downloadedLibtorchArchive.LocalSha)%0A  actual: %(_downloadedLibtorchArchive.DownloadSha)%0ABuild with /p:UpdateSHA=true if you intentionally changed the URL and wish to update the SHAs, otherwise this could indicate an incomplete download or intercerpted URL and should be examined." />

    <!-- The archives are valid, lets extract them, ensuring an empty directory -->
    <RemoveDir Directories="@(LibtorchArchive->'%(ExtractDirectory)')" />
    <MakeDir Directories="@(LibtorchArchive->'%(ExtractDirectory)')" />
    <ZipFileExtractToDirectory Condition="'%(LibtorchArchive.FileExtension)' == '.zip'"
                               SourceArchive="%(LibtorchArchive.DownloadFile)"
                               DestinationDirectory="%(LibtorchArchive.ExtractDirectory)"
                               OverwriteDestination="true" />

    <Message Importance="High" Condition="'%(LibtorchArchive.FileExtension)' == '.tar.gz'" Text="Decompressing '%(LibtorchArchive.DownloadFile)' to '%(LibtorchArchive.ExtractDirectory)'." />
    <Exec Condition="'%(LibtorchArchive.FileExtension)' == '.tar.gz'"
          WorkingDirectory="%(LibtorchArchive.ExtractDirectory)"
          Command="tar -xzmf &quot;$([MSBuild]::MakeRelative('%(LibtorchArchive.ExtractDirectory)', '%(LibtorchArchive.DownloadFile)'))&quot;" />
    <Touch Files="@(LibtorchArchive->'%(ExtractSemaphore)')" AlwaysCreate="true" />
  </Target>

  <!-- Validate and extract Archive for MKL - DNN -->
  <Target Condition="'$(PackageRid)' == 'osx-x64'" 
          Name="ValidateAndExtractArchivesMklDnn" 
          DependsOnTargets="ValidateAndExtractArchivesLibtorch"
          Inputs="@(MklDnnArchive->'%(DownloadFile)')"
          Outputs="@(MklDnnArchive->'%(ExtractSemaphore)')">
    <!-- GenerateChecksums writes a sha checksum to the file specified by DestinationPath metadata -->
    <ItemGroup>
      <_filesToCheckSum Include="@(MklDnnArchive->'%(DownloadFile)')" DestinationPath="%(DownloadShaFile)" />
    </ItemGroup>
    <GenerateChecksums Items="@(_filesToCheckSum)" />

    <!-- If specified we'll update the checked in SHAs with the downloaded ones. -->
    <Copy Condition="'$(UpdateSHA)' == 'true'"
          SourceFiles="@(MklDnnArchive->'%(DownloadShaFile)')"
          DestinationFiles="@(MklDnnArchive->'%(LocalShaFile)')" />

    <Error Condition="!Exists('%(MklDnnArchive.LocalShaFile)')" Text="SHA file '%(MklDnnArchive.LocalShaFile)' does not exist.  Build with /p:UpdateSHA=true to save it." />

    <!-- Read in the SHAs as metadata on the archive items -->
    <ItemGroup>
      <MklDnnArchive>
        <LocalSha>$([System.IO.File]::ReadAllText('%(LocalShaFile)'))</LocalSha>
        <DownloadSha>$([System.IO.File]::ReadAllText('%(DownloadShaFile)'))</DownloadSha>
      </MklDnnArchive>
    </ItemGroup>
    <!-- Validate that the downloaded SHAs match the expected checked in SHAs -->
    <Error Condition="'%(MklDnnArchive.LocalSha)' != '%(MklDnnArchive.DownloadSha)'" Text="Downloaded file '%(MklDnnArchive.DownloadFile)' has unexpected SHA.%0A  expected: %(_downloadedMklDnnArchive.LocalSha)%0A  actual: %(_downloadedMklDnnArchive.DownloadSha)%0ABuild with /p:UpdateSHA=true if you intentionally changed the URL and wish to update the SHAs, otherwise this could indicate an incomplete download or intercerpted URL and should be examined." />

    <!-- The archives are valid, lets extract them, ensuring an empty directory -->
    <RemoveDir Directories="@(MklDnnArchive->'%(ExtractDirectory)')" />
    <MakeDir Directories="@(MklDnnArchive->'%(ExtractDirectory)')" />

    <Message Importance="High" Condition="'%(MklDnnArchive.FileExtension)' == '.tgz'" Text="Decompressing '%(MklDnnArchive.DownloadFile)' to '%(MklDnnArchive.ExtractDirectory)'." />
    <Exec Condition="'%(MklDnnArchive.FileExtension)' == '.tgz'"
          WorkingDirectory="%(MklDnnArchive.ExtractDirectory)"
          Command="tar -xzmf &quot;$([MSBuild]::MakeRelative('%(MklDnnArchive.ExtractDirectory)', '%(MklDnnArchive.DownloadFile)'))&quot;" />
    <Touch Files="@(MklDnnArchive->'%(ExtractSemaphore)')" AlwaysCreate="true" />
  </Target>

  <!-- Select the files we want to copy out of each archive. -->
  <Target Name="GetFilesFromArchive"
          DependsOnTargets="ValidateAndExtractArchivesLibtorch;ValidateAndExtractArchivesMklDnn" >
    <ItemGroup>
      <!-- batch rather than transform so that we can split FilesFromArchive metadata -->
      <_fileFromArchive Include="%(LibtorchArchive.FilesFromArchive)" ExtractDirectory="%(LibtorchArchive.ExtractDirectory)" Runtime="%(LibtorchArchive.Runtime)" />
      <_fileFromArchive Include="%(MklDnnArchive.FilesFromArchive)" ExtractDirectory="%(MklDnnArchive.ExtractDirectory)" Runtime="%(MklDnnArchive.Runtime)" />
      <_fileFromArchive DestinationFile="%(FileName)%(Extension)"/>
      <!-- rename the .so to .dylib since CORECLR's DLLImport convention requires dylib -->
      <!-- <_fileFromArchive Condition="'%(Runtime)' == 'osx-x64' AND '%(Extension)' == '.so'" DestinationFile="%(FileName).dylib" /> -->
      <_fileFromArchive PackagePath="runtimes\%(_fileFromArchive.Runtime)\native\%(_fileFromArchive.DestinationFile)" />

      <!-- LICENSE from the package is actually THIRD_PARTY_NOTICES-->
      <_fileFromArchive Condition="'%(DestinationFile)' == 'LICENSE-LIBTORCH'" PackagePath="THIRD_PARTY_NOTICES_LIBTORCH.txt" Runtime="" />
      <_fileFromArchive Condition="'%(DestinationFile)' == 'LICENSE-MKL-DNN'" PackagePath="THIRD_PARTY_NOTICES_MKL_DNN.txt" Runtime="" />


      <!-- copy to packaging location -->
      <FilesFromArchive Include="@(_fileFromArchive->'%(ExtractDirectory)\%(Identity)')" 
                        TargetPath="$(PackageAssetsPath)$(MSBuildProjectName)\%(PackagePath)" />
      <!-- include LICENSE that was downloaded from GitHub -->
      <FilesFromArchive Include="$(IntermediateOutputPath)\LICENSE-LIBTORCH"
                        TargetPath="$(PackageAssetsPath)$(MSBuildProjectName)\LICENSE-LIBTORCH.txt" />
      <FilesFromArchive Include="$(IntermediateOutputPath)\LICENSE-MKL-DNN"
                        TargetPath="$(PackageAssetsPath)$(MSBuildProjectName)\LICENSE-MKL-DNN.txt" />

      <!-- copy to NativeAssets location, only for current RID, so that they may be used by tests -->
      <FilesFromArchive Condition="'$(PackageRID)' == '%(_fileFromArchive.Runtime)'"
                        Include="@(_fileFromArchive->'%(ExtractDirectory)\%(Identity)')" 
                        TargetPath="$(NativeAssetsBuiltPath)\%(_fileFromArchive.DestinationFile)" />

      <!-- copy mkldnn -->
    </ItemGroup>
  </Target>

  <Target Name="CopyFilesFromArchive"
          DependsOnTargets="GetFilesFromArchive">
    <Message Importance="High" Text="@(FilesFromArchive) -> %(FilesFromArchive.TargetPath)" />
    <Copy SourceFiles="@(FilesFromArchive)"
          DestinationFiles="@(FilesFromArchive->'%(TargetPath)')" />
  </Target>

  <!-- Define Build to do the work of downloading and copying assets -->
  <Target Name="Build"
          DependsOnTargets="CopyFilesFromArchive" />

  <Target Name="Clean">
    <RemoveDir Directories="$(IntermediateOutputPath)" />
  </Target>
</Project>
